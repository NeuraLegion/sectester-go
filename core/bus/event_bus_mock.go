// Code generated by mockery v2.20.0. DO NOT EDIT.

package bus

import mock "github.com/stretchr/testify/mock"

// MockEventBus is an autogenerated mock type for the EventBus type
type MockEventBus struct {
	mock.Mock
}

type MockEventBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBus) EXPECT() *MockEventBus_Expecter {
	return &MockEventBus_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: message
func (_m *MockEventBus) Execute(message *Message) (interface{}, error) {
	ret := _m.Called(message)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*Message) (interface{}, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(*Message) interface{}); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventBus_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockEventBus_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - message *Message
func (_e *MockEventBus_Expecter) Execute(message interface{}) *MockEventBus_Execute_Call {
	return &MockEventBus_Execute_Call{Call: _e.mock.On("Execute", message)}
}

func (_c *MockEventBus_Execute_Call) Run(run func(message *Message)) *MockEventBus_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Message))
	})
	return _c
}

func (_c *MockEventBus_Execute_Call) Return(_a0 interface{}, _a1 error) *MockEventBus_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventBus_Execute_Call) RunAndReturn(run func(*Message) (interface{}, error)) *MockEventBus_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: message
func (_m *MockEventBus) Publish(message *Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEventBus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - message *Message
func (_e *MockEventBus_Expecter) Publish(message interface{}) *MockEventBus_Publish_Call {
	return &MockEventBus_Publish_Call{Call: _e.mock.On("Publish", message)}
}

func (_c *MockEventBus_Publish_Call) Run(run func(message *Message)) *MockEventBus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Message))
	})
	return _c
}

func (_c *MockEventBus_Publish_Call) Return(_a0 error) *MockEventBus_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Publish_Call) RunAndReturn(run func(*Message) error) *MockEventBus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: name, handler
func (_m *MockEventBus) Register(name string, handler EventHandler) error {
	ret := _m.Called(name, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EventHandler) error); ok {
		r0 = rf(name, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockEventBus_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - name string
//   - handler EventHandler
func (_e *MockEventBus_Expecter) Register(name interface{}, handler interface{}) *MockEventBus_Register_Call {
	return &MockEventBus_Register_Call{Call: _e.mock.On("Register", name, handler)}
}

func (_c *MockEventBus_Register_Call) Run(run func(name string, handler EventHandler)) *MockEventBus_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EventHandler))
	})
	return _c
}

func (_c *MockEventBus_Register_Call) Return(_a0 error) *MockEventBus_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Register_Call) RunAndReturn(run func(string, EventHandler) error) *MockEventBus_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: name, handler
func (_m *MockEventBus) Unregister(name string, handler EventHandler) error {
	ret := _m.Called(name, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EventHandler) error); ok {
		r0 = rf(name, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventBus_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type MockEventBus_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - name string
//   - handler EventHandler
func (_e *MockEventBus_Expecter) Unregister(name interface{}, handler interface{}) *MockEventBus_Unregister_Call {
	return &MockEventBus_Unregister_Call{Call: _e.mock.On("Unregister", name, handler)}
}

func (_c *MockEventBus_Unregister_Call) Run(run func(name string, handler EventHandler)) *MockEventBus_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EventHandler))
	})
	return _c
}

func (_c *MockEventBus_Unregister_Call) Return(_a0 error) *MockEventBus_Unregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventBus_Unregister_Call) RunAndReturn(run func(string, EventHandler) error) *MockEventBus_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEventBus interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventBus creates a new instance of MockEventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventBus(t mockConstructorTestingTNewMockEventBus) *MockEventBus {
	mock := &MockEventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
