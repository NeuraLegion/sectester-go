// Code generated by mockery v2.20.0. DO NOT EDIT.

package bus

import mock "github.com/stretchr/testify/mock"

// MockEventHandler is an autogenerated mock type for the EventHandler type
type MockEventHandler struct {
	mock.Mock
}

type MockEventHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventHandler) EXPECT() *MockEventHandler_Expecter {
	return &MockEventHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: message
func (_m *MockEventHandler) Handle(message Message) (interface{}, error) {
	ret := _m.Called(message)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(Message) (interface{}, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(Message) interface{}); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockEventHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - message Message
func (_e *MockEventHandler_Expecter) Handle(message interface{}) *MockEventHandler_Handle_Call {
	return &MockEventHandler_Handle_Call{Call: _e.mock.On("Handle", message)}
}

func (_c *MockEventHandler_Handle_Call) Run(run func(message Message)) *MockEventHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Message))
	})
	return _c
}

func (_c *MockEventHandler_Handle_Call) Return(_a0 interface{}, _a1 error) *MockEventHandler_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventHandler_Handle_Call) RunAndReturn(run func(Message) (interface{}, error)) *MockEventHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEventHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventHandler creates a new instance of MockEventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventHandler(t mockConstructorTestingTNewMockEventHandler) *MockEventHandler {
	mock := &MockEventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
