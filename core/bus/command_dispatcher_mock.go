// Code generated by mockery v2.20.0. DO NOT EDIT.

package bus

import mock "github.com/stretchr/testify/mock"

// MockCommandDispatcher is an autogenerated mock type for the CommandDispatcher type
type MockCommandDispatcher struct {
	mock.Mock
}

type MockCommandDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommandDispatcher) EXPECT() *MockCommandDispatcher_Expecter {
	return &MockCommandDispatcher_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: message
func (_m *MockCommandDispatcher) Execute(message *Message) (interface{}, error) {
	ret := _m.Called(message)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*Message) (interface{}, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(*Message) interface{}); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommandDispatcher_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCommandDispatcher_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - message *Message
func (_e *MockCommandDispatcher_Expecter) Execute(message interface{}) *MockCommandDispatcher_Execute_Call {
	return &MockCommandDispatcher_Execute_Call{Call: _e.mock.On("Execute", message)}
}

func (_c *MockCommandDispatcher_Execute_Call) Run(run func(message *Message)) *MockCommandDispatcher_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Message))
	})
	return _c
}

func (_c *MockCommandDispatcher_Execute_Call) Return(_a0 interface{}, _a1 error) *MockCommandDispatcher_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommandDispatcher_Execute_Call) RunAndReturn(run func(*Message) (interface{}, error)) *MockCommandDispatcher_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCommandDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCommandDispatcher creates a new instance of MockCommandDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCommandDispatcher(t mockConstructorTestingTNewMockCommandDispatcher) *MockCommandDispatcher {
	mock := &MockCommandDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
