// Code generated by mockery v2.20.0. DO NOT EDIT.

package bus

import mock "github.com/stretchr/testify/mock"

// MockRetryStrategy is an autogenerated mock type for the RetryStrategy type
type MockRetryStrategy struct {
	mock.Mock
}

type MockRetryStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRetryStrategy) EXPECT() *MockRetryStrategy_Expecter {
	return &MockRetryStrategy_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function with given fields: task
func (_m *MockRetryStrategy) Acquire(task Retriable) (interface{}, error) {
	ret := _m.Called(task)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(Retriable) (interface{}, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(Retriable) interface{}); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(Retriable) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRetryStrategy_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type MockRetryStrategy_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - task Retriable
func (_e *MockRetryStrategy_Expecter) Acquire(task interface{}) *MockRetryStrategy_Acquire_Call {
	return &MockRetryStrategy_Acquire_Call{Call: _e.mock.On("Acquire", task)}
}

func (_c *MockRetryStrategy_Acquire_Call) Run(run func(task Retriable)) *MockRetryStrategy_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Retriable))
	})
	return _c
}

func (_c *MockRetryStrategy_Acquire_Call) Return(_a0 interface{}, _a1 error) *MockRetryStrategy_Acquire_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRetryStrategy_Acquire_Call) RunAndReturn(run func(Retriable) (interface{}, error)) *MockRetryStrategy_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRetryStrategy interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRetryStrategy creates a new instance of MockRetryStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRetryStrategy(t mockConstructorTestingTNewMockRetryStrategy) *MockRetryStrategy {
	mock := &MockRetryStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
